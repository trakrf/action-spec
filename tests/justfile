# Infrastructure & Deployment Tests
# WAF testing for AWS deployments

# Test WAF path-based filtering (requires ALB_URL env var or argument)
waf-paths ALB_URL="":
    #!/usr/bin/env bash
    set -euo pipefail

    URL="${1:-${ALB_URL:-}}"
    if [ -z "$URL" ]; then
        echo "❌ Error: ALB_URL not provided"
        echo "Usage: just tests waf-paths <alb-url>"
        echo "   or: ALB_URL=http://... just tests waf-paths"
        exit 1
    fi

    # Remove trailing slash
    URL="${URL%/}"

    echo "🔒 Testing WAF Path-Based Filtering"
    echo "Target: $URL"
    echo ""

    echo "✅ Testing ALLOWED paths (should return 200):"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

    echo -n "  /spec ... "
    STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL/spec")
    [ "$STATUS" = "200" ] && echo "✅ $STATUS" || echo "❌ $STATUS (expected 200)"

    echo -n "  /health ... "
    STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL/health")
    [ "$STATUS" = "200" ] && echo "✅ $STATUS" || echo "❌ $STATUS (expected 200)"

    echo -n "  /api/v1/test ... "
    STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL/api/v1/test")
    [ "$STATUS" = "200" ] && echo "✅ $STATUS" || echo "❌ $STATUS (expected 200)"

    echo -n "  / (root) ... "
    STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL/")
    [ "$STATUS" = "200" ] && echo "✅ $STATUS" || echo "❌ $STATUS (expected 200)"

    echo ""
    echo "❌ Testing BLOCKED paths (should return 403):"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

    echo -n "  /admin ... "
    STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL/admin")
    [ "$STATUS" = "403" ] && echo "✅ $STATUS (blocked)" || echo "❌ $STATUS (expected 403)"

    echo -n "  /malicious ... "
    STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL/malicious")
    [ "$STATUS" = "403" ] && echo "✅ $STATUS (blocked)" || echo "❌ $STATUS (expected 403)"

    echo -n "  /../../etc/passwd ... "
    STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL/../../etc/passwd")
    [ "$STATUS" = "403" ] && echo "✅ $STATUS (blocked)" || echo "❌ $STATUS (expected 403)"

    echo -n "  /api/v2/test ... "
    STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL/api/v2/test")
    [ "$STATUS" = "403" ] && echo "✅ $STATUS (blocked - only /api/v1/* allowed)" || echo "❌ $STATUS (expected 403)"

    echo ""
    echo "✓ Path filtering test complete"

# Test WAF rate-based filtering (fire 200 requests to trigger rate limit)
waf-rate ALB_URL="" PATH="/health":
    #!/usr/bin/env bash
    set -euo pipefail

    URL="${1:-${ALB_URL:-}}"
    TEST_PATH="${2:-/health}"

    if [ -z "$URL" ]; then
        echo "❌ Error: ALB_URL not provided"
        echo "Usage: just tests waf-rate <alb-url> [path]"
        echo "   or: ALB_URL=http://... just tests waf-rate"
        exit 1
    fi

    # Remove trailing slash
    URL="${URL%/}"
    FULL_URL="$URL$TEST_PATH"

    echo "🔒 Testing WAF Rate-Based Filtering"
    echo "Target: $FULL_URL"
    echo "Limit: 10 requests per 60 seconds"
    echo "Test: Firing 200 requests to trigger rate limit"
    echo ""

    SUCCESS_COUNT=0
    BLOCKED_COUNT=0
    FIRST_BLOCK=""

    echo "Sending requests (watching for 200→403 transition):"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

    for i in {1..200}; do
        STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$FULL_URL")

        if [ "$STATUS" = "200" ]; then
            SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            printf "."
        elif [ "$STATUS" = "403" ]; then
            if [ -z "$FIRST_BLOCK" ]; then
                FIRST_BLOCK=$i
                echo ""
                echo "⚠️  Rate limit triggered at request #$i"
                echo "   Now showing blocked requests..."
            fi
            BLOCKED_COUNT=$((BLOCKED_COUNT + 1))
            printf "X"
        else
            printf "?"
        fi

        # Show progress every 50 requests
        if [ $((i % 50)) -eq 0 ]; then
            echo " [$i/200]"
        fi
    done

    echo ""
    echo ""
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "📊 Results:"
    echo "  Total requests: 200"
    echo "  Successful (200): $SUCCESS_COUNT"
    echo "  Blocked (403): $BLOCKED_COUNT"

    if [ -n "$FIRST_BLOCK" ]; then
        echo "  First block at request: #$FIRST_BLOCK"
        echo ""
        echo "✅ Rate limiting is WORKING"
        echo "   WAF blocked requests after threshold reached"
    else
        echo ""
        echo "⚠️  Rate limiting NOT triggered"
        echo "   All 200 requests returned 200 OK"
        echo "   Check WAF configuration"
    fi

    echo ""
    echo "💡 Note: Wait 60+ seconds for rate limit to reset"

# Run all WAF tests sequentially
waf-all ALB_URL="":
    #!/usr/bin/env bash
    URL="${1:-${ALB_URL:-}}"

    if [ -z "$URL" ]; then
        echo "❌ Error: ALB_URL not provided"
        echo "Usage: just tests waf-all <alb-url>"
        exit 1
    fi

    just tests waf-paths "$URL"
    echo ""
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo ""
    just tests waf-rate "$URL"
