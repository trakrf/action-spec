# Flask Development Commands for Demo Backend

# Default recipe - show available commands
default:
    @just --list

# Start Flask development server
dev:
    #!/usr/bin/env bash
    set -euo pipefail
    cd backend

    # Load environment variables from root .env.local
    if [ -f "../.env.local" ]; then
        set -a
        source ../.env.local
        set +a
        echo "‚úì Loaded environment from .env.local"
    else
        echo "‚ö†Ô∏è  Warning: .env.local not found in root directory"
    fi

    # Activate venv
    if [ ! -d "venv" ]; then
        echo "‚ùå Virtual environment not found. Run: just setup"
        exit 1
    fi

    source venv/bin/activate
    echo "‚úì Virtual environment activated"
    echo ""
    echo "üöÄ Starting Flask development server..."
    echo "   Open http://localhost:5000 in your browser"
    echo "   Press Ctrl+C to stop"
    echo ""
    flask --app app run --debug --host 0.0.0.0

# Set up virtual environment and install dependencies
setup:
    #!/usr/bin/env bash
    set -euo pipefail
    cd backend

    echo "Creating virtual environment..."
    python3 -m venv venv

    echo "Installing dependencies..."
    venv/bin/pip install -q -r requirements.txt

    echo "‚úì Setup complete!"
    echo "  Run 'just dev' to start the Flask server"

# Clean up virtual environment and cache
clean:
    #!/usr/bin/env bash
    cd backend
    rm -rf venv __pycache__ templates/__pycache__ .pytest_cache
    echo "‚úì Cleaned up venv and cache files"

# Run health check (requires server to be running)
health:
    @curl -s http://localhost:5000/health | python3 -m json.tool

# Test pod discovery (requires server to be running)
test-home:
    @curl -s http://localhost:5000/ | head -30

# Run Flask with custom port
dev-port PORT:
    #!/usr/bin/env bash
    set -euo pipefail
    cd backend

    if [ -f "../.env.local" ]; then
        set -a
        source ../.env.local
        set +a
    fi

    source venv/bin/activate
    echo "üöÄ Starting Flask on port {{PORT}}..."
    flask --app app run --debug --host 0.0.0.0 --port {{PORT}}

# Show Flask logs (if running in background)
logs-flask:
    @tail -f /tmp/flask_run.log 2>/dev/null || echo "No Flask logs found at /tmp/flask_run.log"

# Check if all environment variables are set
check-env:
    #!/usr/bin/env bash
    if [ -f ".env.local" ]; then
        source .env.local
    fi

    echo "Checking required environment variables..."

    if [ -z "${GH_TOKEN:-}" ]; then
        echo "‚ùå GH_TOKEN not set"
    else
        echo "‚úì GH_TOKEN is set"
    fi

    echo "‚úì GH_REPO=${GH_REPO:-trakrf/action-spec}"
    echo "‚úì SPECS_PATH=${SPECS_PATH:-demo/infra}"

# === Docker Compose Commands ===

# Start docker compose services (detached)
up:
    #!/usr/bin/env bash
    set -euo pipefail

    if [ ! -f ".env" ]; then
        echo "‚ö†Ô∏è  Warning: .env file not found"
        echo "   Copy .env.example and add your GH_TOKEN:"
        echo "   cp .env.example .env"
        echo ""
    fi

    echo "üöÄ Starting docker compose services..."
    docker compose up -d
    echo ""
    echo "‚úì Services started"
    echo "  Spec-editor: http://localhost:5000"
    echo "  Demo app: http://localhost:8080"
    echo ""
    echo "Run 'just logs' to view logs"
    echo "Run 'just ps' to check status"

# Stop docker compose services
down:
    #!/usr/bin/env bash
    echo "üõë Stopping docker compose services..."
    docker compose down
    echo "‚úì Services stopped"

# View logs from all services
logs:
    docker compose logs -f

# View logs from spec-editor only
logs-spec:
    docker compose logs -f spec-editor

# View logs from demo-app only
logs-demo:
    docker compose logs -f demo-app

# Restart docker compose services
restart:
    #!/usr/bin/env bash
    echo "üîÑ Restarting docker compose services..."
    docker compose restart
    echo "‚úì Services restarted"

# Restart only spec-editor
restart-spec:
    docker compose restart spec-editor

# Rebuild docker images (no cache)
build:
    #!/usr/bin/env bash
    echo "üî® Building docker images..."
    docker compose build --no-cache
    echo "‚úì Build complete"

# Rebuild and restart services
rebuild: build
    just down
    just up

# Show running containers
ps:
    docker compose ps

# Check health of spec-editor
health-docker:
    @echo "Checking spec-editor health..."
    @curl -s http://localhost:5000/health | python3 -m json.tool || echo "‚ùå Service not responding"

# Pull latest published image from GHCR
pull:
    #!/usr/bin/env bash
    echo "üì• Pulling latest image from GHCR..."
    docker compose pull
    echo "‚úì Pull complete. Run 'just up' to use the latest image"

# Clean up docker volumes and orphaned containers
clean-docker:
    #!/usr/bin/env bash
    echo "üßπ Cleaning up docker resources..."
    docker compose down -v --remove-orphans
    echo "‚úì Cleanup complete"
