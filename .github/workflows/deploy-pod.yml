name: Deploy Pod

on:
  workflow_dispatch:
    inputs:
      customer:
        description: 'Customer name'
        required: true
        type: choice
        options:
          - advworks
          - northwind
          - contoso
      environment:
        description: 'Environment'
        required: true
        type: choice
        options:
          - dev
          - stg
          - prd
      instance_name:
        description: 'Instance name (e.g., web1, app1)'
        required: true
        type: string
      waf_enabled:
        description: 'Enable WAF protection'
        required: false
        type: boolean
        default: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write      # Required for committing spec.yml

    env:
      CUSTOMER: ${{ inputs.customer }}
      ENVIRONMENT: ${{ inputs.environment }}
      INSTANCE_NAME: ${{ inputs.instance_name }}
      WAF_ENABLED: ${{ inputs.waf_enabled }}
      POD_PATH: infra/${{ inputs.customer }}/${{ inputs.environment }}
      SPEC_FILE: infra/${{ inputs.customer }}/${{ inputs.environment }}/spec.yml

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Full history for clean commits

      - name: Setup Python for YAML processing
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'

      - name: Install PyYAML
        run: pip install pyyaml

      - name: Create or Update spec.yml
        run: |
          python3 << 'EOF'
          import yaml
          import sys
          import os
          import shutil

          spec_file = os.environ['SPEC_FILE']
          pod_path = os.environ['POD_PATH']
          customer = os.environ['CUSTOMER']
          environment = os.environ['ENVIRONMENT']
          instance_name = os.environ['INSTANCE_NAME']
          waf_enabled = os.environ['WAF_ENABLED']

          # Convert string boolean to Python boolean
          waf_enabled_bool = waf_enabled.lower() == 'true'

          # Check if spec.yml exists
          spec_exists = os.path.exists(spec_file)

          if not spec_exists:
              # CREATE MODE: New pod
              print(f"📝 Creating new pod: {customer}/{environment}")

              # Create directory structure
              os.makedirs(pod_path, exist_ok=True)
              print(f"✅ Created directory: {pod_path}")

              # Create new spec.yml from template
              spec = {
                  'apiVersion': 'v1',
                  'kind': 'Pod',
                  'metadata': {
                      'customer': customer,
                      'environment': environment
                  },
                  'spec': {
                      'compute': {
                          'instance_name': instance_name,
                          'instance_type': 't4g.nano'  # Default instance type
                      },
                      'security': {
                          'waf': {
                              'enabled': waf_enabled_bool
                          }
                      }
                  }
              }

              # Copy and template Terraform files from template (infra/advworks/dev)
              template_dir = 'infra/advworks/dev'
              tf_files = ['main.tf', 'providers.tf', 'variables.tf']

              # Copy non-templated files as-is
              for tf_file in tf_files:
                  src = os.path.join(template_dir, tf_file)
                  dst = os.path.join(pod_path, tf_file)
                  if os.path.exists(src):
                      shutil.copy2(src, dst)
                      print(f"✅ Copied {tf_file} from template")
                  else:
                      print(f"⚠️  Warning: Template file not found: {src}")

              # Template backend.tf with correct state path
              backend_template = os.path.join(template_dir, 'backend.tf')
              backend_dst = os.path.join(pod_path, 'backend.tf')

              if os.path.exists(backend_template):
                  with open(backend_template, 'r') as f:
                      backend_content = f.read()

                  # Replace hardcoded path with actual customer/environment
                  backend_content = backend_content.replace(
                      'key            = "demo/advworks/dev/terraform.tfstate"',
                      f'key            = "demo/{customer}/{environment}/terraform.tfstate"'
                  )

                  with open(backend_dst, 'w') as f:
                      f.write(backend_content)

                  print(f"✅ Created backend.tf with state path: demo/{customer}/{environment}/terraform.tfstate")
              else:
                  print(f"⚠️  Warning: Template file not found: {backend_template}")

              # Write spec.yml
              with open(spec_file, 'w') as f:
                  yaml.dump(spec, f, default_flow_style=False, sort_keys=False)

              print(f"✅ Created spec.yml:")
              print(f"   customer: {customer}")
              print(f"   environment: {environment}")
              print(f"   instance_name: {instance_name}")
              print(f"   instance_type: t4g.nano")
              print(f"   waf.enabled: {waf_enabled_bool}")

          else:
              # UPDATE MODE: Existing pod
              print(f"📝 Updating existing pod: {customer}/{environment}")

              try:
                  # Read existing spec
                  with open(spec_file, 'r') as f:
                      spec = yaml.safe_load(f)

                  # Validate structure
                  if not spec or 'spec' not in spec:
                      print(f"❌ ERROR: Invalid spec.yml structure - missing 'spec' key")
                      sys.exit(1)

                  if 'compute' not in spec['spec']:
                      print(f"❌ ERROR: Invalid spec.yml structure - missing 'spec.compute' key")
                      sys.exit(1)

                  if 'security' not in spec['spec'] or 'waf' not in spec['spec']['security']:
                      print(f"❌ ERROR: Invalid spec.yml structure - missing 'spec.security.waf' key")
                      sys.exit(1)

                  # Update fields from workflow inputs
                  spec['spec']['compute']['instance_name'] = instance_name
                  spec['spec']['security']['waf']['enabled'] = waf_enabled_bool

                  # Write updated spec
                  with open(spec_file, 'w') as f:
                      yaml.dump(spec, f, default_flow_style=False, sort_keys=False)

                  print(f"✅ Updated spec.yml:")
                  print(f"   instance_name: {instance_name}")
                  print(f"   waf.enabled: {waf_enabled_bool}")

              except yaml.YAMLError as e:
                  print(f"❌ ERROR: Failed to parse YAML: {e}")
                  sys.exit(1)
              except Exception as e:
                  print(f"❌ ERROR: Unexpected error updating spec.yml: {e}")
                  sys.exit(1)
          EOF

      - name: Commit changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Rebase on latest branch to avoid stale branch errors
          echo "🔄 Fetching latest changes..."
          git fetch origin ${{ github.ref_name }}

          # Check if we need to rebase
          LOCAL=$(git rev-parse HEAD)
          REMOTE=$(git rev-parse origin/${{ github.ref_name }})

          if [ "$LOCAL" != "$REMOTE" ]; then
            echo "⚠️  Branch has moved forward, rebasing..."
            # Stash any changes first
            git stash
            git rebase origin/${{ github.ref_name }}
            # Reapply changes
            git stash pop || echo "No stashed changes to pop"
            echo "✅ Rebased on latest origin/${{ github.ref_name }}"
          else
            echo "✅ Branch is up to date"
          fi

          # Add all files in the pod directory (handles both new and updated pods)
          git add ${{ env.POD_PATH }}

          # Only commit if there are changes
          if git diff --staged --quiet; then
            echo "✅ No changes to commit, skipping"
          else
            # Check if this is a new pod or update
            if [ -z "$(git log --all --pretty=format: --name-only -- ${{ env.SPEC_FILE }} | head -1)" ]; then
              git commit -m "deploy: Create new pod ${{ env.CUSTOMER }}/${{ env.ENVIRONMENT }} - instance=${{ env.INSTANCE_NAME }}, waf=${{ env.WAF_ENABLED }}"
            else
              git commit -m "deploy: Update ${{ env.CUSTOMER }}/${{ env.ENVIRONMENT }} - instance=${{ env.INSTANCE_NAME }}, waf=${{ env.WAF_ENABLED }}"
            fi
            git push
            echo "✅ Committed and pushed changes"
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-2' }}

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: 1.8.0

      - name: OpenTofu Init
        working-directory: ${{ env.POD_PATH }}
        run: tofu init

      - name: OpenTofu Plan
        working-directory: ${{ env.POD_PATH }}
        run: tofu plan -out=tfplan

      - name: OpenTofu Apply
        working-directory: ${{ env.POD_PATH }}
        run: tofu apply -auto-approve tfplan

      - name: Output deployment info
        if: success()
        working-directory: ${{ env.POD_PATH }}
        run: |
          echo "### Deployment Complete! :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Customer:** ${{ env.CUSTOMER }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "**Instance Name:** ${{ env.INSTANCE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**WAF Enabled:** ${{ env.WAF_ENABLED }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Show OpenTofu outputs if available
          if tofu output -json > /tmp/tf_output.json 2>/dev/null; then
            echo "**OpenTofu Outputs:**" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            cat /tmp/tf_output.json >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
